random_seed = 20;                       // Seed for random number generator; use 0 to base on time.
Value num_bits = (20 * 9) + 20;

Population main_pop;
Population next_pop;

CommandLine cl {                        // Module to handle basic I/O on the command line.
  target_pop = "main_pop";              // Which population should we print stats about?
}
Mutate mut {                            // Module to trigger mutations in organisms
  target_pop = "main_pop";              // Which population should we mutate?
  skip = 1;                             // Number of orgs to exempt from mutating
}
EvalNK enk {                            // Module to evaluate bitstrings on an NK Fitness Lanscape
  target_pop = "main_pop";              // Which population should we evaluate?
  N = num_bits;                         // Number of bits required in output
  K = 3;                                // Number of bits used in each gene
  bits_trait = "NK";                    // Which trait stores the bit sequence to evaluate?
  fitness_trait = "fitness";            // Which trait should we store NK fitness in?
}
SelectElite select_e {                  // Module to choose the top fitness organisms for replication.
  target_pop = "main_pop";              // Which population should we select parents from?
  top_count = 1;                        // Number of top-fitness orgs to be replicated
  copy_count = 1;                       // Number of copies to make of replicated organisms
  fitness_trait = "fitness";            // Which trait provides the fitness value to use?
}
SelectTournament select_t {             // Module to select the top fitness organisms from random subgroups for replication.
  target_pop = "main_pop";              // Which population should we select parents from?
  tournament_size = 7;                  // Number of orgs in each tournament
  num_tournaments = 199;                // Number of tournaments to run
  fitness_trait = "fitness";            // Which trait provides the fitness value to use?
}
GrowthPlacement place_g {               // Module to always appened births onto a population.
  from_pop = "main_pop";                // Population to manage births from.
  to_pop = "next_pop";                  // Population to place offspring in (same as from_pop for continuous generations.)
}

BitsOrg bits_org {                      // Organism type
  N = num_bits;                         // Number of bits in organism
}

@start() print("random_seed = ", random_seed, "\n");
@start() inject("bits_org", 200);
@update(100) exit();
